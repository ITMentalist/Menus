import static java.awt.GridBagConstraints.*
import javax.swing.*
import java.awt.*
import groovy.swing.SwingBuilder
import groovy.text.Template
import groovy.text.SimpleTemplateEngine
// need this for property retrieval
import java.io.*;
import java.util.*
import java.awt.BorderLayout as BL
import javax.swing.BorderFactory; 
import javax.swing.border.*
import javax.swing.border.LineBorder
import javax.swing.JFrame
import javax.swing.JTextField
import java.awt.GridLayout
import java.awt.Color
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import javax.swing.text.*
import java.awt.Graphics

/* to do:
1. change title to include date/time/user/system name/pwd
2. include icons to setup initial position to a cornor of the screen - properties does this
3. make jextfield have an underline rather than a box
4. allow function keys - done
5. to run builtin commands, write a temp. script that's callable - not required; use 'command' prefix on mac os
6. multi-column choices
7. non-numeric option kills menu - done
8. change caret to block
9. use scroll pane jtextarea to display results - done using styled JTextPane; also cut&copy works
10. try using command echo $GROOVY_HOME  to decode environmental variables - needs more work if 2 $values
11. make text in jtextpane courier and green text and blue border - done
12. Run modal commands from options line - done
13. SBMJOB
14. call qcmd
15. F9 recall previous command - maybe !!!
16. Reposition textpane to start of most recent command - change scrollpane values ??
17. decode ls -al hexcodes on display
18. include F key usage in panel - done
19. report no such option - done
20. use return  code to color code the text - done
21. find index of error=2 - done
22. save as ./log/logfile.txt
23. as general purpose tool, use File>Open, File>New and File>Save to preserve text files, notes, logs 
24. cannot balance top/bottom panels when expanded to full screen mode
25. finish timer
26. use menu.txt in place of properties to build menu structure
//	lookAndFeel("metal")		

*/

class Menus implements KeyListener 
{

	String propertyfile = './data/menu.properties'  // non-OS specific parameters for business issues
	//String os = "ubuntu"
	def support
	def config
	def static swing
	def static frame
	def menuLines = 0
	JTextPane jtp;

	//Border greenline = BorderFactory.createLineBorder(Color.green,1,true);
	Border greenline = new LineBorder(Color.green,1,true);
	Border cyanline = new LineBorder(Color.cyan,1);
	def mono = new Font("Courier New", Font.BOLD, 10)

	def p1 
	def p2 
	def p3 
	def footer1 = "F3 = Exit  F9=Recall  F12=Cancel"
	def static audit = true
	
	// e.isAltDown()	true if the ALT key was down when this event happened.
	// e.isControlDown()	true if the CTRL key was down when this event happened.
	// e.isShiftDown()	true if the SHIFT key was down when this event happened.
	// e.isMetaDown()	true if the META key was down when this event happened.
	// e.isAltGraphDown()	true if the ALT-GRAPH key was down when this event happened.
	public void keyReleased(KeyEvent e){}
	public void keyTyped(KeyEvent e)   {}
	public void keyPressed(KeyEvent ke) 
	{
		boolean f = false
		if (ke.isShiftDown()) 
		{
			f = true
		}
		switch (ke.getKeyCode()) 
		{
			case KeyEvent.VK_F3:  // move x coordinate left
			if (f)
			{
				println "F15 key pressed"
			}
			else
			{
				println "F3 key pressed"
				ender()
			} // end of lese
			break;


			case KeyEvent.VK_F9: // recall prior command
			swing.tf.text = support.getStack()
			break;


			case KeyEvent.VK_F12: // move x coordinate right
			println "F12 key pressed"
			break;
		} // end of switch
		// drawing.repaint();
    	} // end of keyPressed


	public static void setAudit() {audit=true}
	
	public void say(def text) 
	{
		if (audit) {println "$text";} 
	} // end of say

	public void say(def text, boolean flag) 
	{
		if (audit) {print "$text";} 
	} // end of say

	public static void say(String text) 
	{
		if (audit) {println "$text";} 
	} // end of say


	public getConfig()
	{
		return config
	}

	public computeNano(def nano1)
	{
		say("start nano=${nano1}")
		def nano2 = System.nanoTime()
		def el = 0.000
		el = (nano2 - nano1) / 1000000000
		//def sf1 = String.format('nanoseconds:%<tN', el)
		say("elapsed=${el} sec.s")
		return el.toString()
	} // end of nano compute

	// ==========================
	// setup up gui actions
	// ==========================
	def saver =
	{ event ->
		say("===============\nsaver() = ${swing.tf.text.trim()}")
		def nano1 = System.nanoTime()
		def num = 0
		boolean f = true		
		try{ num= swing.tf.text.toInteger()} catch(NumberFormatException x) {f=false; num=0;}
		def option = swing.tf.text

		if (option.equals("")) 
		{
			support.resetStack()
			return;
		} // end of if

		if (num==99) ender(event) 

		if (!f)
		{
			support.runCommand(option)
			//swing.t3.text = computeNano(nano1)
			swing.tf.text=""
		}
		else
		{
			if (num< 1 || num > menuLines) 
			{
				swing.tf.text=""
				support.appendText("\n* No such option: $option", support.as2);
				//swing.t3.text = computeNano(nano1)
			}
			else
			{
				support.runCommand(option.toInteger())
				support.setTitle3("hi kids")
				//swing.t3.text = "hi kids" //
				//suppport.title3 = computeNano(nano1)
				swing.tf.text=""
				swing.p1 = support.getTitles()
			} // end of else
		} // end of else

	} // end of saver


	// setup up gui actions
	def ender =
	{ event ->
		System.exit(0)
	}

	// ====================
	// build a swing panel
	public void getPanel()
	{
		JFrame.setDefaultLookAndFeelDecorated(true);
		swing = new SwingBuilder()
		frame = swing.frame(title:"Menus", pack:true, show:false,maximumSize:[1024, 750],
			defaultCloseOperation:JFrame.EXIT_ON_CLOSE, background:Color.BLACK) 
		{
		  vbox()
		  {
			container(p1)
			panel(id:'p2',constraints:BL.CENTER,maximumSize:[790, 220])
			{
				gridLayout(columns:1,rows:0) 
				menuLines.times
				{ml -> 
					def no = "${ml+1}"
					def mn = "${config.menus.names[ml]}"
					label(id:'l${ml}',font:mono,foreground:Color.GREEN, "${no}. ${mn}",preferredSize:[350, 12])
				} // end of ml

				hbox(preferredSize:[790, 12])
				{
					def t3 = label(id:'t3','Enter menu no : ',foreground:Color.GREEN)
					textField(id:'tf',  opaque:false, foreground:Color.GREEN, columns: 2, 
						maximumSize: [780, 12], border:null, actionPerformed: { event -> saver()}
						)
					tf.addKeyListener(this);
					tf.setCaretColor(Color.GREEN)
					tf.getCaret().setBlinkRate(600);
					t3.setHorizontalTextPosition(JLabel.LEFT);
				} // end of hbox
				label(id:'f1',font:mono,foreground:Color.GREEN, "${footer1}",preferredSize:[795, 12])
			} // end of panel

			panel(id:'p3',constraints:BL.SOUTH,preferredSize:[790, 390])
			{
			   vbox
			   {
				//vstrut(1)
				// here is textpane with output of most recent command
				scrollPane(border:cyanline) {widget(jtp) }
				//vstrut(2)
			   } // end of vbox

			} // end of panel
		  } // end of vbox

		} // end of frame


		// store handle to frame, then position frame in center of display
		support.setFrame(frame)
		def loc = config.location
		support.moveWindow(loc) // move this frame to center of display 

	} // end getPanel



	// ===============
	// constructor
	// ===============
	public Menus() 
	{ 
		JFrame.setDefaultLookAndFeelDecorated(true)
		// Get all system properties
  		Properties props = System.getProperties()
  		def osn = (String)props.get("os.name");
  		def tokens = osn.toLowerCase().split(' ').toList()
  		def osid = tokens[0]
		//say("... Menus() set to use $osid")

       		config = new ConfigSlurper().parse(new File(propertyfile).toURL())
       		menuLines = config.menus.names.size()
       		//say("there are ${menuLines} menu items")
		//say("... config is set to use '$osid' paths")

		support = new Support()
		jtp = support.getTextPane()
		support.appendText("O/S=${osn} and ", null);
		support.appendText("${propertyfile}", support.as0);
		support.appendText(" has ", null);
		support.appendText("${menuLines}", support.as1);
		support.appendText(" menu choices");
		p1 = support.getTitles()

        } // end of default constructor

	// test harness for this class
	public static void main(String[] args)
	{	
		//println "... started"
		setAudit()
		Menus ivs = new Menus()
		ivs.getPanel()
		ivs.frame.show()
		//ivs.say("... done ===")

	} // end of main

};    // end of class 

