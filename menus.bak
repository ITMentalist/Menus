import static java.awt.GridBagConstraints.*
import javax.swing.*
import java.awt.*
import groovy.swing.SwingBuilder
import groovy.text.Template
import groovy.text.SimpleTemplateEngine
// need this for property retrieval
import java.io.*;
import java.util.*
import java.awt.BorderLayout as BL
import javax.swing.BorderFactory; 
import javax.swing.border.*
import javax.swing.border.LineBorder
import javax.swing.JFrame
import javax.swing.JTextField
import java.awt.GridLayout
import java.awt.Color
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import javax.swing.text.*
import java.awt.Graphics

/* to do:
1. change title to include date/time/user/system
2. include icons to setup initial position to a cornor of the screen
3. make jextfield have an underline rather than a box
4. allow function keys - done
5. to run builtin commands, write a temp. script that's callable - not required
6. multi-column choices
7. non-numeric option kills menu - temp. fix
8. change caret to block
9. use scroll pane jtextarea to display results - done using styled JTextPane
10. try using command echo $GROOVY_HOME  to decode environmental variables
11. make text in jtextpane courier and green text and blue border

//	lookAndFeel("metal")		

*/

class Menus implements KeyListener 
{

	String propertyfile = './data/menu.properties'  // non-OS specific parameters for business issues
	//String os = "ubuntu"
	def ls = System.getProperty('line.separator')
	def fs = System.getProperty('file.separator')
	def us = System.getProperty('user.name')
	def os = System.getProperty('os.name')

	def support
	def config
	def static swing
	def static frame
	def menuLines = 0
	JTextPane jtp;

	//Border greenline = BorderFactory.createLineBorder(Color.green,1,true);
	Border greenline = new LineBorder(Color.green,1,true);
	def mono = new Font("Courier New", Font.BOLD, 10)
	def title1 = "         1         2         3         4         5         6         7         8         9         0         1         2         3 2"
	def title2 = "123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012"

	def static audit = true
	
	// e.isAltDown()	true if the ALT key was down when this event happened.
	// e.isControlDown()	true if the CTRL key was down when this event happened.
	// e.isShiftDown()	true if the SHIFT key was down when this event happened.
	// e.isMetaDown()	true if the META key was down when this event happened.
	// e.isAltGraphDown()	true if the ALT-GRAPH key was down when this event happened.
	public void keyReleased(KeyEvent e){}
	public void keyTyped(KeyEvent e)   {}
	public void keyPressed(KeyEvent ke) 
	{
		boolean f = false
		if (ke.isShiftDown()) 
		{
			f = true
		}
		switch (ke.getKeyCode()) 
		{
			case KeyEvent.VK_F3:  // move x coordinate left
			if (f)
			{
				println "F15 key pressed"
			}
			else
			{
				println "F3 key pressed"
				ender()
			} // end of lese
			break;

			case KeyEvent.VK_F12: // move x coordinate right
			println "F12 key pressed"
			break;
		} // end of switch
		// drawing.repaint();
    	} // end of keyPressed


	public static void setAudit() {audit=true}
	
	public void say(def text) 
	{
		if (audit) {println "$text";} 
	} // end of say

	public void say(def text, boolean flag) 
	{
		if (audit) {print "$text";} 
	} // end of say

	public static void say(String text) 
	{
		if (audit) {println "$text";} 
	} // end of say


	public getConfig()
	{
		return config
	}

	// setup up gui actions
	def saver =
	{ event ->
		say("===============\nsaver() = ${swing.tf.text.trim()}")
		def num = 0
		boolean f = true		
		try{ num= swing.tf.text.toInteger()} catch(NumberFormatException x) {f=false; num=0;}
		say "yes..."
		def option = swing.tf.text
		if (option.equals("")) return;
		if (num==99) ender(event) 
		if (num< 1 || num>menuLines || !f ) 
		{
			say("   no such option")
			swing.tf.text=""
		}
		else
		{
			support.runCommand(option.toInteger())
			swing.tf.text=""
		} // end of else

	} // end of saver


	// setup up gui actions
	def ender =
	{ event ->
		System.exit(0)
	}

	// ====================
	// build a swing panel
	public getPanel()
	{
		JFrame.setDefaultLookAndFeelDecorated(true);
		swing = new SwingBuilder()
		frame = swing.frame(title:"Menus", preferredSize:[795, 490], pack:true, show:false,
			defaultCloseOperation:JFrame.EXIT_ON_CLOSE, background:Color.BLACK,  layout:new BorderLayout()) 
		{

    panel(constraints:BL.CENTER)
    {
			gridLayout(columns:1,rows:0) 
			label(id:'tl',font:mono,foreground:Color.GREEN, "${title1}")
			label(id:'t2',font:mono,foreground:Color.GREEN, "${title2}")
			menuLines.times
			{ml -> 
				def no = "${ml+1}"
				def mn = "${config.menus.names[ml]}"
				label(id:'l${ml}',font:mono,foreground:Color.GREEN, "${no}. ${mn}")
			}
    } // end of panel
    panel(constraints:BL.SOUTH)
    {
			hbox
			{
				label('Enter menu no : ',foreground:Color.GREEN)
				textField(id:'tf',  opaque:false, foreground:Color.GREEN, columns: 2, 
					maximumSize: [80, 12], border:null, actionPerformed: { event -> saver() },
				)
				tf.addKeyListener(this);
    				tf.setCaretColor(Color.GREEN)
				tf.getCaret().setBlinkRate(600);
			} // end of hbox
    } // end of panel


    panel(constraints:BL.NORTH)
    {
			// here is textpane with output of most recent command
			scrollPane(border:null) {widget(jtp) }
    } // end of panel

		} // end of frame

		// store handle to frame, then position frame in center of display
		support.setFrame(frame)
		support.moveWindow("C") // move this frame to center of display 
	} // end getPanel


	// ===============
	// constructor
	// ===============
	public Menus() 
	{ 
		JFrame.setDefaultLookAndFeelDecorated(true)
		// Get all system properties
  		Properties props = System.getProperties()
  		def osn = (String)props.get("os.name");
  		def tokens = osn.toLowerCase().split(' ').toList()
  		def osid = tokens[0]
		say("... Menus() set to use $osid")

       		config = new ConfigSlurper().parse(new File(propertyfile).toURL())
       		menuLines = config.menus.names.size()
       		say("there are ${menuLines} menu items")
		say("... config is set to use '$osid' paths")

		support = new Support()
		jtp = support.getTextPane()
		support.appendText("It was a bright ", null);
		support.appendText("cold", support.as0);
		support.appendText(" day in ", null);
		support.appendText("April", support.as1);
		support.appendText("\n");
        } // end of default constructor

	// test harness for this class
	public static void main(String[] args)
	{	
		println "... started"
		setAudit()
		Menus ivs = new Menus()
		ivs.getPanel()
		ivs.frame.show()
		ivs.say("... done ===")

	} // end of main

};    // end of class 

