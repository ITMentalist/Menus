/*       an earlier version of the logic to build a system header set as a maximum width of 132 chars; see HeaderSupport for a later way to do this  worked ok but columns would not move when window was resized.
        user.home /Users/leanne
        user.dir /Volumes/UBUNTU/Groovy/Menus
        x java.runtime.version 1.6.0_15-b03-226
        x os.name=Mac OS X os.version 10.5.8
        http.proxyHost 10.0.1.4 https.proxyPort 8080
---------  */

public class CommandSet
{
    def cmd = "command set"	// mac os command to see environmental variables
    def txt
    def map =[:]
    def words=[]
    def word1

    // keywords needed from environmental variables to fill map
    def keywords = ["hostname","classpath","java_home","path","gaelyk_home","groovy_home","grails_home", "home","pwd","user","uid"]

    // system property keys used to fill map
    def propkeys = ["os.name","os.version","java.version","java.runtime.version","user.home","user.dir","http.proxyHost","http.proxyPort"]	

    //def map = ["hostname","classpath","java_home","path","gaelyk_home","groovy_home","grails_home", "home","pwd","user","uid"]



    public CommandSet()
    {
 
        Properties props = System.getProperties()
	props.each{k,v-> println "props k=$k v=$v"    }
	println "================================"
	
	def key
	def tx
	propkeys.each{k ->  
		tx = (props.get(k)) ?  (String)props.get(k) : "unknown"  
        	map.put(k,tx)
		println "map.put k=$k v=$tx"
	} // end of each
        setDate()

/* ----------------------------
obsolete code left here as spare examples of how to load a map from java system properties
        def key = "os.name"
        def tx = (String)props.get(key)
        map.put(key,tx)

        key = "os.version"
        tx = (String)props.get(key)
        map.put(key,tx)

        key = "java.runtime.version"
        tx = (String)props.get(key)
        map.put(key,tx)

        key = "user.home"
        tx = (String)props.get(key)
        map.put(key,tx)

        key = "user.dir"
        tx = (String)props.get(key)
        map.put(key,tx)

        key = "http.proxyHost"
        tx = (props.get(key)) ?  (String)props.get(key) : "unknown"
        map.put(key,tx)

        key = "http.proxyPort"
        tx = (props.get(key)) ?  (String)props.get(key) : "unknown"
        map.put(key,tx)    


        setDate()
        //map.each{k,v -> println "mp has k=$k and v=$v"}
        //def x = map["user"]
        //println "that's all folks"    
------  */

	// logic to ask mac os to provide list of known environmental properties - may not work on ubuntu or windows
        txt = cmd.execute().text
        txt.eachLine
        {
          line -> 
		if (line.trim().size() > 0)
		{
	            words = line.split(/=/)

		    //println "<"+line+"> has "+words.size()+" words";

		    if (words.size()>1)
		    {
	        	    //words.each{print "|$it|"} // end of each    
        	    	    //println '\n'
            		    word1=words[0].toLowerCase()
	    		    //if (words.size() > 1  & words[1]==null) {words[1]="unknown"}
            		    if (keywords.contains(word1)) 
			    {
				map.put(word1,words[1])
				println "> map[$word1] = "+map[word1]
			    }   //  else {map.put(word1,"unknown")}
		    }
		} // end of if
        } // end of eachLine
	
	// find inet declaration
	def inet = "inet"
	"ifconfig".execute().text.eachLine
	{	line ->
		if (line.trim().size() > 0)
		{
	            words = line.trim().split(/ /);
		    if (words.size()>1)
		    {
            		    word1=words[0].toLowerCase()
			    if (word1==inet)
			    {
				map.put(word1,words[1])
				println "> inet search map[$word1] = "+map[word1]
			    }   //  else {map.put(word1,"unknown")}

		    } // end of if
		}  // end of if		
	} // end of execute


	println "-------------------------------------"
	map.each{k,v -> println "map[$k]=$v";}


    } // end of constructor
    
    // get property map
    def getMap()
    {
        return map
    } // end of get

    def setDate()
    {
        words = new Date().toString().split(' ')
        def dat = words[0]+' '+words[2]+' '+words[1]+' '+words[5]		// like  Mon 21 Dec 2009
        def tim = words[3]+' '+words[4]        					// like 16:37:40 CET
        map.put("date",dat)
        map.put("time",tim)
    } // end of setDate
    
    
    def getLine1()
    {
        def x="System  : "+map["os.name"]+' '+map["os.version"]
        def y = "Mouseless Menus v1.0"
        def z = "Date: "+map["date"]
        int x1 = x.size()
        int y1 = y.size() / 2
        int z1 = z.size()
        def ln = x
        int w = 66 - (x1 + y1)
        w = (w<1) ? 1 : w
        w.times{ln+=' '}
        ln+=y
        w = 66 - (z1 + y1)
        w.times{ln+=' '}
        ln+=z
        return ln
    } // end of get


    def getLine2()
    {
        setDate()    
        def x = "Hostname: "+map["hostname"]
        def y = "user.home=${map["user.home"]}"
        def z = "Time: "+map["time"]
        int x1 = x.size()
        int y1 = y.size() / 2 
        int z1 = z.size()
        
        def ln = x    // hostname
        int w = 66 - (x1 + y1)
        w = (w<1) ? 1 : w
        w.times{ln+=' '}
        ln+=y        // user.home
        x1 = ln.size()
        w = 66 - (z1 + y1)
        if (x1+w+z1 > 132) {w-=1;}
        w.times{ln+=' '}
        ln+=z        // time
        return ln
    } // end of get


    def getLine3()
    {
        setDate()    
        def x = "Network : "+map["http.proxyHost"]+" "+map["http.proxyPort"]
        def y = "user.dir=${map["user.dir"]}"
        def z = "User: "+map["user"]+' '+map["uid"]
        int x1 = x.size()
        int y1 = y.size() / 2
        int z1 = z.size()
        
        def ln = x
        int w = 66 - (x1 + y1)
        w = (w<1) ? 1 : w
        w.times{ln+=' '}
        ln+=y
        x1 = ln.size()
        w = 66 - (z1 + y1)
        if (x1+w+z1 > 132) {w-=1;}
        w.times{ln+=' '}
        ln+=z
        return ln
    } // end of get

    def getLine4()
    {
	        def aa="Line 4 : "
		aa+=getMap("gaelyk_home")
		aa+=' '
		aa+=getMap("classpath")
		return aa
    }

    def getMap(k)
    {
	def tx = (this.map[k]==null) ? "not declared" : this.map[k] 
	return k+":"+tx
    }
    // ============================
    // test harness for this class
    public static void main(String[] args)
    {    
        println "--------------------------------------------> starting"
        def parm = "/Volumes/USBKEY/Menus/"
        args.each{a -> parm=a
        } // end of each
        CommandSet cs = new CommandSet()
        def q = cs.getMap()["http.proxyHost"]	// this method gets a map reference then uses a [key] to find a value in that map
        println "q="+q				// but getMap(k) is prettier as null keys return 'not declared'
        13.times {print '1234567890'};
	println "";
        println cs.getLine1()
        println cs.getLine2()
        println cs.getLine3()
        println cs.getLine4()
        println "... end"
    } // end of main

} // end of class
